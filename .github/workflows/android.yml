name: Android CI

on:
  push:
    tags:
      - 'v*'  # 只在推送v开头的tag时运行
  pull_request:
    branches: [ main, develop ]

# 添加权限设置
permissions:
  contents: write  # 允许创建release

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest --stacktrace
      continue-on-error: true

    - name: Generate Test Report
      run: ./gradlew jacocoTestDebugUnitTestReport
      continue-on-error: true



    # 可选：如果你设置了Codecov token，可以取消注释下面的步骤
    # - name: Upload Report to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     file: ./app/build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml
    #     flags: unittests

  # GitHub Release Job - 只在推送v开头的tag时运行
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Check Signing Secrets
      id: check_secrets
      run: |
        if [ -n "${{ secrets.KEY_JKS }}" ] && [ -n "${{ secrets.ANDROID_STORE_PASSWORD }}" ] && [ -n "${{ secrets.ALIAS }}" ] && [ -n "${{ secrets.ANDROID_KEY_PASSWORD }}" ]; then
          echo "✅ 所有签名密钥已配置，将使用提供的密钥构建签名APK"
          echo "SIGNING_MODE=provided" >> $GITHUB_OUTPUT
        else
          echo "⚠️ 签名密钥未完整配置，将使用临时测试密钥构建APK"
          echo "缺失的secrets:"
          [ -z "${{ secrets.KEY_JKS }}" ] && echo "  - KEY_JKS"
          [ -z "${{ secrets.ANDROID_STORE_PASSWORD }}" ] && echo "  - ANDROID_STORE_PASSWORD"
          [ -z "${{ secrets.ALIAS }}" ] && echo "  - ALIAS"
          [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ] && echo "  - ANDROID_KEY_PASSWORD"
          echo "SIGNING_MODE=temporary" >> $GITHUB_OUTPUT
        fi

    - name: Setup Android Keystore
      run: |
        if [ -n "${{ secrets.KEY_JKS }}" ]; then
          echo "🔑 使用提供的密钥文件..."
          echo "${{ secrets.KEY_JKS }}" | base64 -d > keystore.jks
        else
          echo "🔑 创建临时测试密钥文件..."
          # 创建一个临时的测试密钥
          keytool -genkey -v -keystore keystore.jks \
            -alias android-test-key \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android \
            -dname "CN=Test, OU=Test, O=Test, L=Test, S=Test, C=US"
          echo "TEMP_ALIAS=android-test-key" >> $GITHUB_ENV
          echo "TEMP_STORE_PASSWORD=android" >> $GITHUB_ENV
          echo "TEMP_KEY_PASSWORD=android" >> $GITHUB_ENV
        fi
        
        echo "🔍 检查密钥文件信息..."
        ls -la keystore.jks
        
        # 尝试列出密钥文件中的别名
        if [ -n "${{ secrets.KEY_JKS }}" ]; then
          echo "🔍 检查密钥文件中的别名..."
          keytool -list -keystore keystore.jks -storepass "${{ secrets.ANDROID_STORE_PASSWORD }}" 2>/dev/null || echo "⚠️ 无法列出密钥别名，可能密码不正确"
        else
          echo "🔍 测试密钥文件已创建，别名: android-test-key"
          keytool -list -keystore keystore.jks -storepass android
        fi

    - name: Build Signed Release APK
      run: |
        echo "🔨 开始构建签名APK..."
        KEYSTORE_PATH=$(pwd)/keystore.jks
        echo "密钥文件路径: $KEYSTORE_PATH"
        
        # 设置签名参数
        if [ -n "${{ secrets.KEY_JKS }}" ]; then
          STORE_PASSWORD="${{ secrets.ANDROID_STORE_PASSWORD }}"
          KEY_ALIAS="${{ secrets.ALIAS }}"
          KEY_PASSWORD="${{ secrets.ANDROID_KEY_PASSWORD }}"
          echo "✅ 使用配置的签名密钥"
        else
          STORE_PASSWORD="android"
          KEY_ALIAS="android-test-key"
          KEY_PASSWORD="android"
          echo "✅ 使用临时测试密钥"
        fi
        
        echo "🔑 签名参数:"
        echo "  - 密钥文件: $KEYSTORE_PATH"
        echo "  - 密钥别名: $KEY_ALIAS"
        echo "  - 存储库密码: [已设置]"
        echo "  - 密钥密码: [已设置]"
        
        ./gradlew assembleRelease -x test \
          -Pandroid.injected.signing.store.file="$KEYSTORE_PATH" \
          -Pandroid.injected.signing.store.password="$STORE_PASSWORD" \
          -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
          -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
        echo "✅ 签名APK构建完成"

    - name: Get tag name
      id: tag_name
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Find and rename APK file
      run: |
        echo "Listing build output directories:"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        ls -la app/build/outputs/apk/release/ || echo "Release directory not found"
        
        # Find the actual APK file
        APK_FILE=$(find app/build/outputs/apk/release/ -name "*.apk" | head -1)
        if [ -f "$APK_FILE" ]; then
          echo "Found APK: $APK_FILE"
          cp "$APK_FILE" AndroidProxyToggle.apk
        else
          echo "No APK file found in release directory"
          exit 1
        fi

    - name: Create Release and Upload APK
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
        name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
        body: |
          🚀 Android Proxy Toggle ${{ steps.tag_name.outputs.TAG_NAME }}
          
          ## 📱 下载APK
          请下载下方的APK文件进行安装
          
          ## 🔐 APK状态
          ${{ steps.check_secrets.outputs.SIGNING_MODE == 'provided' && '✅ **正式签名APK** - 使用配置的生产密钥签名，可直接安装使用' || '⚠️ **测试签名APK** - 使用临时测试密钥签名，仅供测试使用' }}
          
          ## 🔄 更新内容
          - 更新到版本 ${{ steps.tag_name.outputs.TAG_NAME }}
          
          ## 📝 说明
          这是一个Android代理切换应用的发布版本
        draft: false
        prerelease: false
        files: |
          AndroidProxyToggle.apk

    - name: Cleanup Keystore
      run: |
        if [ -f "keystore.jks" ]; then
          rm -f keystore.jks
          echo "🧹 密钥文件已清理"
        fi
      if: always()
